# This file is part of crlibm, the correctly rounded mathematical library,
# which has been developed by the Arénaire project at École normale supérieure
# de Lyon.
#
# Copyright (C) 2004-2011 David Defour, Catherine Daramy-Loirat,
# Florent de Dinechin, Matthieu Gallet, Nicolas Gast, Christoph Quirin Lauter,
# and Jean-Michel Muller
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

log2h = <float64ne> (_log2h);
log2m = <float64ne> (_log2m);
log2l = <float64ne> (_log2l);

c3 = <float64ne> (_c3);
c4 = <float64ne> (_c4);
c5 = <float64ne> (_c5);
c6 = <float64ne> (_c6);
c7 = <float64ne> (_c7);


E = 1; #MAPLE

logih = <float64ne> (_logih);
logim = <float64ne> (_logim);
logil = <float64ne> (_logil);


zh = <float64ne> (Z);
zl = Z - zh; #MAPLE

polyHorner <float64ne>= c3 + zh * (c4 + zh * (c5 + zh * (c6 + zh * c7)));

ZhSquarehl = zh * zh; #MAPLE
zhSquareh = <float64ne> (ZhSquarehl);
zhSquarel = <float64ne> (ZhSquarehl - zhSquareh);

zhSquareHalfh = zhSquareh * (-0.5); #MAPLE
zhSquareHalfl = zhSquarel * (-0.5); #MAPLE
ZhSquareHalfhl = ZhSquarehl * (-0.5); #MAPLE

polyUpper <float64ne>= polyHorner * (zh * zhSquareh);


temp = <float64ne> (zh * zl);
T1hl = polyUpper - temp; #MAPLE
t1h = <float64ne> (T1hl);
t1l = <float64ne> (T1hl - t1h);

T2 = Z + ZhSquareHalfhl; #MAPLE
t2h = <float64ne> (T2hl);
t2l = <float64ne> (T2hl - t2h);

PE = T2hl + T1hl; #MAPLE
ph = <float64ne> (Phl);
pl = <float64ne> (Phl - ph);

Log2hed = E * log2h; #MAPLE
Log2med = E * log2m; #MAPLE

Log2edhm = Log2hed + Log2med; #MAPLE
log2edh = <float64ne> (Log2edhm);
log2edl = <float64ne> (Log2edhm - log2edh);

#Useful additional definitions
Log2hm = log2h + log2m; #MAPLE
Logihm = logih + logim; #MAPLE
#End additional

LogTabPoly = Logihm + Phl; #MAPLE
logTabPolyh = <float64ne> (LogTabPolyhl);
logTabPolyl = <float64ne> (LogTabPolyhl - logTabPolyh);

LogE = Log2edhm + LogTabPolyhl; #MAPLE
logh = <float64ne> (Loghm);
logm = <float64ne> (Loghm - logh);

#Mathematical definition of the logarithm and the polynomial

Phigher = (c3 + Z * (c4 + Z * (c5 + Z * (c6 + Z * c7)))); #MAPLE
ZZZ = Z*Z*Z; #MAPLE
ZZZPhigher = ZZZ * Phigher; #MAPLE
HZZ = (-0.5*Z*Z); #MAPLE
ZpHZZ = Z + HZZ; #MAPLE
P = ZpHZZ + ZZZPhigher; #MAPLE
Log2E = E * Log2; #MAPLE
Log1pZpTab = Log1pZ + Logir; #MAPLE
Log = Log2E + Log1pZpTab; #MAPLE

# Useful additional definitions

HZZsimp = HZZ + (zh * zl); #MAPLE
ZpHZZsimp = Z + HZZsimp; #MAPLE
ZZZPhigherPzhzl = ZZZPhigher - zh * zl; #MAPLE
zhCube = zh * zhSquareh; #MAPLE

delta1 = T2hl - T2; #MAPLE
delta2 = polyUpper - (polyHorner * zhCube); #MAPLE
delta3 = zhCube - ZZZ; #MAPLE
delta4 = Phl - PE; #MAPLE
delta5 = Loghm - LogE; #MAPLE
delta6 = P - Log1pZ; #MAPLE
delta7 = LogTabPolyhl - LogTabPoly; #MAPLE

# End additional


{
(T2hl - T2) / T2 in [-1b-103,1b-103]
/\ (Phl - PE) / PE in [-1b-103,1b-103]
/\ (LogTabPolyhl - LogTabPoly) / LogTabPoly in [-1b-103,1b-103]
/\ (Loghm - LogE) / LogE in [-1b-103,1b-103]
/\ (Log2hm - Log2) / Log2 in [-1b-84,1b-84]
/\ (Logihm - Logir) / Logir in [-1b-106,1b-106]
/\ Z in [_zmin,_zmax]
/\ (P - Log1pZ) / Log1pZ in [-_epsilonApproxQuick,_epsilonApproxQuick]
/\ ((logh + logm) - Loghm) / Loghm in [-1b-106,1b-106]
->
((logh + logm) - Log) / Log in [-5b-65,5b-65]
}

T2hl - T2 -> ((T2hl - T2) / T2) * T2;
T2hl -> (T2hl - T2) + T2;

Phl - PE -> ((Phl - PE) / PE) * PE;
Phl -> (Phl - PE) + PE;


LogTabPolyhl -> (LogTabPolyhl - LogTabPoly) + LogTabPoly;

Loghm -> (Loghm - LogE) + LogE;

Log2 -> Log2hm * (1 / (((Log2hm - Log2) / Log2) + 1));

Logir -> Logihm * (1 / (((Logihm - Logir) / Logir) + 1));


LogTabPolyhl - LogTabPoly -> ((LogTabPolyhl - LogTabPoly) / LogTabPoly) * LogTabPoly;

HZZsimp -> (-0.5 * zh * zh) - (0.5 * zl * zl);

T2hl - ZpHZZsimp -> (0.5 * zl * zl) + delta1;

zhCube - ZZZ -> (Z * (zhSquareh - Z * Z)) - (zl * zhSquareh);

polyUpper - ZZZPhigher -> ZZZ * (polyHorner - Phigher) + polyHorner * delta3 + delta2;

ZpHZZ + ZZZPhigher -> ZpHZZsimp + ZZZPhigherPzhzl;

Phl - P -> (T2hl - ZpHZZsimp) + (T1hl - ZZZPhigherPzhzl) + delta4;

Log1pZ -> P * (1 / (((P - Log1pZ) / Log1pZ) + 1));
P - Log1pZ -> ((P - Log1pZ) / Log1pZ) * Log1pZ;

Phl - Log1pZ -> (Phl - P) + delta6;

LogTabPolyhl - Log1pZpTab -> (Logihm - Logir) + (Phl - Log1pZ) + delta7;

Loghm - Log -> (Log2edhm - Log2E) + (LogTabPolyhl - Log1pZpTab) + delta5;

(logh + logm) - Loghm -> (((logh + logm) - Loghm) / Loghm) * Loghm;

(logh + logm) - Log -> ((logh + logm) - Loghm) + (Loghm - Log);