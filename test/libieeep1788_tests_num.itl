/*
Copyright 2013-2015 Marco Nehmeier (nehmeier@informatik.uni-wuerzburg.de)
Copyright 2015-2016 Oliver Heimlich

Original author: Marco Nehmeier (unit tests in libieeep1788,
                 original license: Apache License 2.0)
Converted into portable ITL format by Oliver Heimlich with minor corrections.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, see <http://www.gnu.org/licenses/>.
*/


testcase minimal_inf_test {
    inf [empty] = +infinity;
    inf [-infinity,+infinity] = -infinity;
    inf [1.0,2.0] = 1.0;
    inf [-3.0,-2.0] = -3.0;
    inf [-infinity,2.0] = -infinity;
    inf [-infinity,0.0] = -infinity;
    inf [-infinity,-0.0] = -infinity;
    inf [-2.0,infinity] = -2.0;
    inf [0.0,infinity] = -0.0;
    inf [-0.0,infinity] = -0.0;
    inf [-0.0,0.0] = -0.0;
    inf [0.0,-0.0] = -0.0;
    inf [0.0,0.0] = -0.0;
    inf [-0.0,-0.0] = -0.0;
}

testcase minimal_inf_dec_test {
    inf [empty]_trv = +infinity;
    inf [-infinity,+infinity]_def = -infinity;
    inf [1.0,2.0]_com = 1.0;
    inf [-3.0,-2.0]_trv = -3.0;
    inf [-infinity,2.0]_dac = -infinity;
    inf [-infinity,0.0]_def = -infinity;
    inf [-infinity,-0.0]_trv = -infinity;
    inf [-2.0,infinity]_trv = -2.0;
    inf [0.0,infinity]_def = -0.0;
    inf [-0.0,infinity]_trv = -0.0;
    inf [-0.0,0.0]_dac = -0.0;
    inf [0.0,-0.0]_trv = -0.0;
    inf [0.0,0.0]_trv = -0.0;
    inf [-0.0,-0.0]_trv = -0.0;
}

testcase minimal_sup_test {
    sup [empty] = -infinity;
    sup [-infinity,+infinity] = +infinity;
    sup [1.0,2.0] = 2.0;
    sup [-3.0,-2.0] = -2.0;
    sup [-infinity,2.0] = 2.0;
    sup [-infinity,0.0] = 0.0;
    sup [-infinity,-0.0] = 0.0;
    sup [-2.0,infinity] = infinity;
    sup [0.0,infinity] = infinity;
    sup [-0.0,infinity] = infinity;
    sup [-0.0,0.0] = 0.0;
    sup [0.0,-0.0] = 0.0;
    sup [0.0,0.0] = 0.0;
    sup [-0.0,-0.0] = 0.0;
}

testcase minimal_sup_dec_test {
    sup [empty]_trv = -infinity;
    sup [-infinity,+infinity]_def = +infinity;
    sup [1.0,2.0]_com = 2.0;
    sup [-3.0,-2.0]_trv = -2.0;
    sup [-infinity,2.0]_dac = 2.0;
    sup [-infinity,0.0]_def = 0.0;
    sup [-infinity,-0.0]_trv = 0.0;
    sup [-2.0,infinity]_trv = infinity;
    sup [0.0,infinity]_def = infinity;
    sup [-0.0,infinity]_trv = infinity;
    sup [-0.0,0.0]_dac = +0.0;
    sup [0.0,-0.0]_trv = +0.0;
    sup [0.0,0.0]_trv = +0.0;
    sup [-0.0,-0.0]_trv = +0.0;
}

testcase minimal_mid_test {
    mid [-infinity,+infinity] = 0.0;
    mid [-0x1.FFFFFFFFFFFFFp1023,+0x1.FFFFFFFFFFFFFp1023] = 0.0;
    mid [0.0,2.0] = 1.0;
    mid [2.0,2.0] = 2.0;
    mid [-2.0,2.0] = 0.0;
    mid [-0X0.0000000000002P-1022,0X0.0000000000001P-1022] = 0.0;
    mid [-0X0.0000000000001P-1022,0X0.0000000000002P-1022] = 0.0;
}

testcase minimal_mid_dec_test {
    mid [-infinity,+infinity]_def = 0.0;
    mid [-0x1.FFFFFFFFFFFFFp1023,+0x1.FFFFFFFFFFFFFp1023]_trv = 0.0;
    mid [0.0,2.0]_com = 1.0;
    mid [2.0,2.0]_dac = 2.0;
    mid [-2.0,2.0]_trv = 0.0;
    mid [-0X0.0000000000002P-1022,0X0.0000000000001P-1022]_trv = 0.0;
    mid [-0X0.0000000000001P-1022,0X0.0000000000002P-1022]_trv = 0.0;
}

testcase minimal_rad_test {
    rad [0.0,2.0] = 1.0;
    rad [2.0,2.0] = 0.0;
    rad [-infinity,+infinity] = infinity;
    rad [0.0,infinity] = infinity;
    rad [-infinity, 1.2] = infinity;
}

testcase minimal_rad_dec_test {
    rad [0.0,2.0]_trv = 1.0;
    rad [2.0,2.0]_com = 0.0;
    rad [-infinity,+infinity]_trv = infinity;
    rad [0.0,infinity]_def = infinity;
    rad [-infinity, 1.2]_trv = infinity;
}

testcase minimal_wid_test {
    wid [2.0,2.0] = 0.0;
    wid [1.0,2.0] = 1.0;
    wid [1.0,infinity] = infinity;
    wid [-infinity,2.0] = infinity;
    wid [-infinity,+infinity] = infinity;
}

testcase minimal_wid_dec_test {
    wid [2.0,2.0]_com = 0.0;
    wid [1.0,2.0]_trv = 1.0;
    wid [1.0,infinity]_trv = infinity;
    wid [-infinity,2.0]_def = infinity;
    wid [-infinity,+infinity]_trv = infinity;
}

testcase minimal_mag_test {
    mag [1.0,2.0] = 2.0;
    mag [-4.0,2.0] = 4.0;
    mag [-infinity,2.0] = infinity;
    mag [1.0,infinity] = infinity;
    mag [-infinity,+infinity] = infinity;
    mag [-0.0,0.0] = 0.0;
    mag [-0.0,-0.0] = 0.0;
}

testcase minimal_mag_dec_test {
    mag [1.0,2.0]_com = 2.0;
    mag [-4.0,2.0]_trv = 4.0;
    mag [-infinity,2.0]_trv = infinity;
    mag [1.0,infinity]_def = infinity;
    mag [-infinity,+infinity]_trv = infinity;
    mag [-0.0,0.0]_trv = 0.0;
    mag [-0.0,-0.0]_trv = 0.0;
}

testcase minimal_mig_test {
    mig [1.0,2.0] = 1.0;
    mig [-4.0,2.0] = 0.0;
    mig [-4.0,-2.0] = 2.0;
    mig [-infinity,2.0] = 0.0;
    mig [-infinity,-2.0] = 2.0;
    mig [-1.0,infinity] = 0.0;
    mig [1.0,infinity] = 1.0;
    mig [-infinity,+infinity] = 0.0;
    mig [-0.0,0.0] = 0.0;
    mig [-0.0,-0.0] = 0.0;
}

testcase minimal_mig_dec_test {
    mig [1.0,2.0]_com = 1.0;
    mig [-4.0,2.0]_trv = 0.0;
    mig [-4.0,-2.0]_trv = 2.0;
    mig [-infinity,2.0]_def = 0.0;
    mig [-infinity,-2.0]_trv = 2.0;
    mig [-1.0,infinity]_trv = 0.0;
    mig [1.0,infinity]_trv = 1.0;
    mig [-infinity,+infinity]_trv = 0.0;
    mig [-0.0,0.0]_trv = 0.0;
    mig [-0.0,-0.0]_trv = 0.0;
}
